[
  
  {
    "title": "Competent cell, Inoue Method",
    "url": "/posts/inoue/",
    "categories": "Lab protocol",
    "tags": "Competent cell, Protocol",
    "date": "2024-12-04 00:00:00 +0800",
    





    
    "snippet": "The Inoue Method for Preparation and Transformation of Competent E. Coli: “Ultra-Competent” CellsJoseph Sambrook and David W. RussellThis protocol was adapted from Molecular Cloning, 3rd edition, b...",
    "content": "The Inoue Method for Preparation and Transformation of Competent E. Coli: “Ultra-Competent” CellsJoseph Sambrook and David W. RussellThis protocol was adapted from Molecular Cloning, 3rd edition, by Joseph Sambrook and David W. Russell.Cold Spring Harbor Laboratory Press, Cold Spring Harbor, NY, USA, 2001.INTRODUCTIONThis protocol reproducibly generates competent cultures of E. coli that yield 1 x 10⁸ to 3 x 10⁸ transformed colonies/µg of plasmid DNA. Optimal results are achieved when the bacterial culture is grown at 18°C. If a suitable incubator is unavailable, a standard bacterial shaker can be placed in a 4°C cold room and regulated to 18°C.MATERIALS  DMSO: High grade (HPLC grade or better).  Inoue transformation buffer: Chilled to 0°C before use (see Step 1).  Plasmid DNA: Construct using methods such as Directional Cloning into Plasmid Vectors or Blunt-ended Cloning into Plasmid Vectors.  SOB agar plates: Containing 20 mM MgSO₄ and the appropriate antibiotic.  SOB medium: For growth of culture to be transformed.  SOC medium: Approximately 1 ml per transformation reaction.MEDIA RECIPESSOB Medium| Reagent           | Amount               ||——————-|———————-|| NaCl              | 0.5 g               || Tryptone          | 20 g                || Yeast extract     | 5 g                 || Deionized H₂O     | To 950 ml           |  Dissolve solutes and add 10 ml of 250 mM KCl.  Adjust pH to 7.0 with 5 N NaOH.  Adjust volume to 1 L with deionized H₂O.  Autoclave for 20 minutes.  Add 5 ml of sterile 2 M MgCl₂ before use.SOC MediumSOC is identical to SOB but contains 20 mM glucose.After autoclaving SOB medium, add 20 ml of sterile 1 M glucose (filter-sterilized).METHOD1. Prepare Inoue Transformation Buffer  Prepare 0.5 M PIPES (pH 6.7): Dissolve 15.1 g of PIPES in 80 ml of pure H₂O. Adjust pH with 5 M KOH and bring volume to 100 ml. Sterilize by filtration.  Prepare the transformation buffer as follows:            Reagent      Amount per liter      Final Concentration                  MnCl₂•4H₂O      10.88 g      55 mM              CaCl₂•2H₂O      2.20 g      15 mM              KCl      18.65 g      250 mM              PIPES (0.5 M, pH 6.7)      20 ml      10 mM              H₂O      To 1 liter               Sterilize by filtration and store at -20°C.2. Grow Bacterial Culture  Pick a single bacterial colony from a plate (incubated for 16–20 hours at 37°C).  Transfer the colony to 25 ml of SOB medium in a 250-ml flask.  Incubate at 37°C with vigorous shaking for 6–8 hours.3. Overnight Growth at 18°C  Use the starter culture to inoculate three 1-liter flasks containing 250 ml of SOB.          Flask 1: 10 ml starter culture.      Flask 2: 4 ml starter culture.      Flask 3: 2 ml starter culture.        Incubate overnight at 18–22°C with moderate shaking.4. Harvesting Cells  Measure OD600 of all three cultures. When one reaches 0.55, place it on ice for 10 minutes. Discard the other two cultures.  Centrifuge at 2500g for 10 minutes at 4°C. Remove all medium.5. Resuspension and Freezing  Resuspend cells in 80 ml of ice-cold Inoue transformation buffer.  Repeat centrifugation and resuspend in 20 ml of Inoue buffer.  Add 1.5 ml of DMSO, mix, and store on ice for 10 minutes.  Aliquot into sterile tubes and snap-freeze in liquid nitrogen. Store at -70°C.TRANSFORMATION1. Thawing Competent Cells  Thaw a tube of competent cells in the palm of your hand and transfer to an ice bath.2. Adding DNA  Add transforming DNA (up to 25 ng per 50 µl of competent cells). Gently mix.  Incubate on ice for 30 minutes.3. Heat Shock  Place the tubes in a 42°C water bath for 90 seconds.  Transfer to ice for 1–2 minutes.4. Recovery and Plating  Add 800 µl of SOC medium. Incubate at 37°C with shaking for 45 minutes.  Plate up to 200 µl on SOB agar containing 20 mM MgSO₄ and antibiotic.5. Incubation  Incubate plates at 37°C for 12–16 hours.REFERENCES  Inoue, H., Nojima, H., and Okayama, H. 1990. High efficiency transformation of Escherichia coli with plasmids. Gene 96: 23–28."
  },
  
  {
    "title": "RosettaDock-5.0",
    "url": "/posts/Rosetta-Docking/",
    "categories": "Bioinformatics, Docking",
    "tags": "Bioinformatics, docking",
    "date": "2024-12-01 00:00:00 +0800",
    





    
    "snippet": "RosettaDock-5.0  RosettaDock은 몬테카를로(Monte Carlo) 기반 다단계 도킹 알고리즘을 사용1. RosettaDock-5.0 Quick Start입력 파일 준비  단백질 파트너의 초기 위치를 추정하여 서로의 표면이 마주 보도록 설정.  PyMOL을 사용하여 분자를 번역 및 회전 가능:          PyMOL 팁:    ...",
    "content": "RosettaDock-5.0  RosettaDock은 몬테카를로(Monte Carlo) 기반 다단계 도킹 알고리즘을 사용1. RosettaDock-5.0 Quick Start입력 파일 준비  단백질 파트너의 초기 위치를 추정하여 서로의 표면이 마주 보도록 설정.  PyMOL을 사용하여 분자를 번역 및 회전 가능:          PyMOL 팁:                  오른쪽 패널에서 “편집 모드” 활성화.          Shift + 좌클릭 + 중간 버튼으로 이동 및 회전.          File → Export Molecule로 PDB 저장.                    기본 실행 명령  -s: 입력 구조 파일(PDB)을 지정합니다.  -out:path:all: 출력 파일 경로를 지정합니다.      -nstruct: 생성할 구조의 수를 지정합니다.    ./bin/docking_protocol.default.linuxgccrelease \\-s [파일 경로 및 입력파일] \\-docking: partners [도킹 파트너] \\-out:path:all [결과 파일 경로] \\-nstruct [실행 횟수] \\      예시./bin/docking_protocol.default.linuxgccrelease \\    -s input/chemi_A_B_rosedock.pdb \\    -docking:partners A_B \\    -out:path:all /mnt/c/Users/MARS/rosettadock/main/source/output/ \\    -nstruct 102. 결과 파일구조 파일 (.pdb)  PDB 파일: 각 도킹 후보 모델에 대해 생성.점수 파일 (.sc)  점수 파일(scorefile): 모든 생성된 모델의 에너지 및 메트릭 요약.3. 결과 파일 해석  성공적 도킹 기준: 상위 5개의 모델 중 3개 이상이 “허용” 이상일 경우 성공적인 도킹 (N5 &gt;= 3).            지표      설명                  Total      복합체의 전체 에너지.              I_sc      인터페이스 점수 (결합 인터페이스의 에너지). 일반적으로 -5 ~ -10 사이의 값 추천.      CAPRI 평가 지표도킹 모델의 정확성을 다음 기준으로 평가:  0: 부정확 모델 (검정)  1: 허용 수준 모델 (노랑)  2: 중간 품질 모델 (빨강)  3: 고품질 모델 (초록)후처리  점수 파일 정렬:          Total Score 기준으로 점수 파일을 정렬.      I_sc 값 확인: 좋은 데코이는 보통 -5 ~ -10 범위에 속함.        클러스터링:          상위 200개의 데코이를 RMSD 기준으로 클러스터링.      클러스터 크기와 점수를 비교하여 최적의 구조를 선택.        데코이 수:          글로벌 도킹: 최소 10,000개의 데코이 생성 필요. 이상적으로는 100,000개 생성 권장.      로컬 도킹: 최소 1,000개의 데코이 생성.        추가 점수 계산:          인터페이스 점수가 표시되지 않는 경우 -score:docking_interface_score 1 플래그 사용.        스크립트 사용:          클러스터링 및 후처리를 자동화하려면 Rosetta++ 튜토리얼에서 제공하는 스크립트 활용.      4. 옵션 설명General Docking  -docking:partners: 도킹할 체인을 지정합니다.    -docking:partners A_B              A는 리간드 체인, B는 수용체 체인입니다.        -docking:randomize1, -docking:randomize2: 각각의 체인을 초기 위치에서 무작위화합니다.    -docking:randomize1 true-docking:randomize2 true        -docking:low_res_protocol_only: 저해상도 도킹 프로토콜만 실행합니다.    -docking:low_res_protocol_only true          리간드 도킹 관련 옵션  -docking:ligand: 리간드 도킹 작업을 활성화합니다.    -docking:ligand true        -docking:ligand:protocol: 리간드 도킹 프로토콜을 지정합니다.    -docking:ligand:protocol full        -docking:ligand:soft_rep: 부드러운 반발력을 활성화합니다.    -docking:ligand:soft_rep true      Grid-Based Ligand Docking  -docking:ligand:grid: 그리드 기반 계산을 활성화합니다.    -docking:ligand:grid true        -docking:ligand:grid_kin: 생성된 그리드를 .kin 파일 형식으로 저장합니다.    -docking:ligand:grid_kin grid_output.kin        -docking:ligand:grid_map: 그리드를 BRIX 맵 형식으로 저장합니다.    -docking:ligand:grid_map grid_output.map      예제./bin/docking_protocol.default.linuxgccrelease \\  -s receptor_ligand.pdb \\  -docking:ligand true \\  -docking:ligand:protocol full \\  -docking:ligand:soft_rep true \\  -nstruct 20 \\  -out:path:all /path/to/output/Symmetric Docking대칭성을 고려한 도킹 시 사용되는 옵션입니다.  -docking:symmetry: 대칭성을 활성화합니다.    -docking:symmetry true        -docking:symmetry:minimize_backbone: 단백질 백본의 최소화를 허용합니다.    -docking:symmetry:minimize_backbone true      예제./bin/docking_protocol.default.linuxgccrelease \\  -s symmetric_complex.pdb \\  -docking:symmetry true \\  -docking:symmetry:minimize_backbone true \\  -nstruct 10 \\  -out:path:all /path/to/output/6. Links  Github: https://github.com/ccsb-scripps/AutoDock-GPU  RosettaCommons: https://rosettacommons.org/  RosettaCommons github:https://github.com/RosettaCommons  Documentation: https://docs.rosettacommons.org/docs/latest/application_documentation/docking/docking-protocol"
  },
  
  {
    "title": "Oligo designer",
    "url": "/posts/oligodesigner/",
    "categories": "Bioinformatics, Tool",
    "tags": "Oliognucleotide, Oiligo designer",
    "date": "2024-11-08 00:00:00 +0800",
    





    
    "snippet": "Oligo designer (PCA를 위한) 코드 사용법중첩되는 서열의 Tm 값을 만족하는 조각을 만들어 PCA(Polymerase Chain Assembly) 프라이머를 설계하는 Python 코드 사용법을 설명합니다.1. Tm(녹는 온도) 계산 (Wallace 공식)calculate_tm 함수는 DNA 조각의 Tm을 Wallace 공식을 사용해 계산...",
    "content": "Oligo designer (PCA를 위한) 코드 사용법중첩되는 서열의 Tm 값을 만족하는 조각을 만들어 PCA(Polymerase Chain Assembly) 프라이머를 설계하는 Python 코드 사용법을 설명합니다.1. Tm(녹는 온도) 계산 (Wallace 공식)calculate_tm 함수는 DNA 조각의 Tm을 Wallace 공식을 사용해 계산합니다.[Tm = 2 \\times (A + T) + 4 \\times (G + C)]각 염기서열의 A, T, G, C 개수를 센 후 공식을 적용하여 Tm을 계산합니다.2. 프라이머 설계 함수: design_pca_primersdesign_pca_primers 함수는 PCA를 위한 DNA 조각들을 생성하고, 각 조각의 Tm 값을 확인하여 설정된 Tm 범위에 맞는지 검사합니다.매개변수  sequence: 전체 DNA 서열  min_fragment_length, max_fragment_length: 조각의 최소 및 최대 길이  min_tm, max_tm: 중첩 서열의 Tm 범위작동 방식  while 루프를 통해 서열을 조각 단위로 나눕니다.  각 조각의 Tm 값이 min_tm과 max_tm 범위 내에 있으면 조각을 선택합니다.  선택된 각 조각에 대해 Forward와 Reverse 프라이머를 설계하고, 결과는 primers 리스트에 저장됩니다.3. 사용 예시  전체 DNA 서열(sequence)을 입력하고, 프라이머를 설계하기 위해 design_pca_primers 함수를 호출합니다.  각 조각에 대해 Fragment 번호, 서열, 길이, Tm, Forward 및 Reverse 프라이머를 출력합니다.Codedef calculate_tm(sequence):    # Wallace 공식: Tm = 2(A+T) + 4(G+C)    a_count = sequence.count('A')    t_count = sequence.count('T')    g_count = sequence.count('G')    c_count = sequence.count('C')    tm = 2 * (a_count + t_count) + 4 * (g_count + c_count)    return tmdef design_pca_primers(sequence, min_fragment_length=75, max_fragment_length=95, min_tm=50, max_tm=55):    primers = []    fragments = []    i = 0    while i &lt; len(sequence):        selected_fragment = None        overlap_tm = 0        for fragment_length in range(max_fragment_length, min_fragment_length - 1, -1):            if i + fragment_length &gt; len(sequence):                fragment_length = len(sequence) - i            fragment = sequence[i:i + fragment_length]            if i + fragment_length &lt; len(sequence):                overlap_sequence = sequence[i + fragment_length - (fragment_length - min_fragment_length):i + fragment_length]                overlap_tm = calculate_tm(overlap_sequence)                if min_tm &lt;= overlap_tm &lt;= max_tm:                    selected_fragment = fragment                    i += fragment_length - (fragment_length - min_fragment_length)                    break            else:                selected_fragment = fragment                i += fragment_length        if selected_fragment:            fragments.append((selected_fragment, overlap_tm))    # 짝수 개의 조각을 유지하기 위해 조정    if len(fragments) % 2 != 0:        fragments.pop()    # 프라이머 설계 (Forward 및 Reverse)    for i, (fragment, overlap_tm) in enumerate(fragments):        forward_primer = fragment        if i &lt; len(fragments) - 1:            reverse_primer = fragments[i + 1][0][:min_fragment_length]  # 다음 조각의 오버랩 서열을 사용        else:            reverse_primer = \"\"  # 마지막 조각의 Reverse Primer는 필요하지 않음        primers.append({            \"fragment_number\": i + 1,            \"fragment_sequence\": fragment,            \"fragment_length\": len(fragment),            \"overlap_tm\": overlap_tm,            \"forward_primer\": forward_primer,            \"reverse_primer\": reverse_primer        })    return primers# 제공된 전체 DNA 서열sequence = \"ATGAGCAAAGGTGAAGAACTGTTTACCGGCGTTGTGCCGATTCTGGTGGAACTGGATGGCGATGTGAACGGTCACAAATTCAGCGTGCGTGGTGAAGGTGAAGGCGATGCCACGATTGGCAAACTGACGCTGAAATTTATCTGCACCACCGGCAAACTGCCGGTGCCGTGGCCGACGCTGGTGACCACCCTGACCTATGGCGTTCAGTGTTTTAGTCGCTATCCGGATCACATGAAACGTCACGATTTCTTTAAATCTGCAATGCCGGAAGGCTATGTGCAGGAACGTACGATTAGCTTTAAAGATGATGGCAAATATAAAACGCGCGCCGTTGTGAAATTTGAAGGCGATACCCTGGTGAACCGCATTGAACTGAAAGGCACGGATTTTAAAGAAGATGGCAATATCCTGGGCCATAAACTGGAATACAACTTTAATAGCCATAATGTTTATATTACGGCGGATAAACAGAAAAATGGCATCAAAGCGAATTTTACCGTTCGCCATAACGTTGAAGATGGCAGTGTGCAGCTGGCAGATCATTATCAGCAGAATACCCCGATTGGTGATGGTCCGGTGCTGCTGCCGGATAATCATTATCTGAGCACGCAGACCGTTCTGTCTAAAGATCCGAACGAAAAACGGGACCACATGGTTCTGCACGAATATGTGAATGCGGCAGGTATTACGTGGAGCCATCCGCAGTTCGAAAAATAA\"# 프라이머 설계primers = design_pca_primers(sequence, min_fragment_length=75, max_fragment_length=95, min_tm=50, max_tm=54)# 결과 출력for primer in primers:    print(f\"Fragment {primer['fragment_number']}:\")    print(f\"  Sequence: {primer['fragment_sequence']}\")    print(f\"  Fragment Length: {primer['fragment_length']} bp\")    print(f\"  Overlap Tm: {primer['overlap_tm']} °C\")    print(f\"  Forward Primer: {primer['forward_primer']}\")    print(f\"  Reverse Primer: {primer['reverse_primer']}\")    print(\"\\n\")"
  },
  
  {
    "title": "24년 10월 한국공업화학회",
    "url": "/posts/marsmars/",
    "categories": "Blogging, Lab Photo",
    "tags": "Photo",
    "date": "2024-11-08 00:00:00 +0800",
    





    
    "snippet": "아름다운 사진과 함께광주 학회를 다녀왔습니다. (수-금)금요일 오전 엄청난 사건을 알게 되었는데요, 비밀입니다.",
    "content": "아름다운 사진과 함께광주 학회를 다녀왔습니다. (수-금)금요일 오전 엄청난 사건을 알게 되었는데요, 비밀입니다."
  },
  
  {
    "title": "Benchling",
    "url": "/posts/benchling/",
    "categories": "Bioinformatics, Sequence analysis",
    "tags": "Bioinformatics, Sequence analysis",
    "date": "2024-11-07 00:00:00 +0800",
    





    
    "snippet": "Benchling의 주요 기능1. 서열 분석 및 클로닝 설계  DNA, RNA, 단백질 서열의 분석 및 설계.  클로닝 설계 및 플라스미드 맵 생성.  데이터 시각화 및 통계 분석 도구 제공.2. 용이한 데이터 관리  다양한 실험 데이터를 한 곳에서 연결.  실험 데이터를 팀원과 공유하거나 협업 가능.  언제 어디서든 접속 가능.  데이터 백업 및 보...",
    "content": "Benchling의 주요 기능1. 서열 분석 및 클로닝 설계  DNA, RNA, 단백질 서열의 분석 및 설계.  클로닝 설계 및 플라스미드 맵 생성.  데이터 시각화 및 통계 분석 도구 제공.2. 용이한 데이터 관리  다양한 실험 데이터를 한 곳에서 연결.  실험 데이터를 팀원과 공유하거나 협업 가능.  언제 어디서든 접속 가능.  데이터 백업 및 보안 관리."
  },
  
  {
    "title": "Autodock-GPU",
    "url": "/posts/autodock-gpu/",
    "categories": "Bioinformatics, Docking",
    "tags": "Bioinformatics, docking",
    "date": "2024-11-07 00:00:00 +0800",
    





    
    "snippet": "AutoDock-GPU  AutoDock-GPU는 Scripps Research의 Forli 연구소에서 개발된 소프트웨어로, AutoDock 4.2.6의 OpenCL 및 CUDA 가속 버전1. AutoDock-GPU Quick Start필요한 파일  Receptor Grid Map 파일 (.fld): --ffile로 지정.  Ligand 파일 (.pd...",
    "content": "AutoDock-GPU  AutoDock-GPU는 Scripps Research의 Forli 연구소에서 개발된 소프트웨어로, AutoDock 4.2.6의 OpenCL 및 CUDA 가속 버전1. AutoDock-GPU Quick Start필요한 파일  Receptor Grid Map 파일 (.fld): --ffile로 지정.  Ligand 파일 (.pdbqt): --lfile로 지정.  기타 옵션에 따라 필요에 따라 추가 파일을 준비.실행 명령어 형식./bin/autodock_gpu_64wi \\--ffile [Receptor Grid Map 경로] \\--lfile [Ligand 파일 경로] \\--nrun [실행 횟수] \\--resnam [결과 파일 경로] \\&gt; [로그 파일 경로]예시./bin/autodock_gpu_64wi \\--ffile /mnt/c/Users/MARS/AutoDock-GPU/input/soyoon/1ac8/1ac8_protein.maps.fld \\--lfile /mnt/c/Users/MARS/AutoDock-GPU/input/soyoon/1ac8/1ac8_ligand.pdbqt \\--nrun 10 \\--resnam /mnt/c/Users/MARS/AutoDock-GPU/output/soyoon/1ac8_result.dlg \\&gt; /mnt/c/Users/MARS/AutoDock-GPU/output/soyoon/1ac8_log.txt2. 결과 파일결과 파일 (.dlg)  경로: --resnam 옵션에서 지정한 위치.  주요 정보:          Estimated Free Energy of Binding: 도킹된 리간드의 예상 결합 자유 에너지.      RMSD (Root Mean Square Deviation): 도킹 자세의 변동성을 보여주는 값.      Clusters: 각 클러스터의 평균 에너지 및 발생 빈도.      로그 파일 (.txt)  경로: 명령 끝에 &gt;로 지정한 파일.  내용:          명령 실행 과정.      CUDA 디바이스 및 메모리 사용량.      오류 및 디버그 메시지.      3. 결과 파일 해석결과 파일 주요 섹션Free Energy of Binding  파일의 Estimated Free Energy of Binding 항목에서 리간드의 결합 에너지를 확인합니다.  값이 더 낮을수록 결합이 안정적입니다.    DOCKED: USER    Estimated Free Energy of Binding    =  -8.25 kcal/mol      RMSD Table  RMSD 값을 통해 도킹 자세의 변동성을 평가합니다.  RMSD가 2.0 Å 이하인 클러스터를 주로 사용합니다.클러스터 분석  Clustering Histogram 섹션을 확인하여 가장 빈도가 높은 클러스터를 찾습니다.    Clus | Lowest    | Run | Mean      | Num | HistogramRank | Binding   |     | Binding   | Clus|    5    10   15   20_____|___________|_____|___________|_____|____:____|____:____   1 |     -8.31 |  10 |     -8.05 |  10 |##########      4. 주요 옵션 설명입력 파일 관련            옵션      설명      기본값                  --lfile / -L      Ligand 파일 경로 (.pdbqt 파일)      필수              --ffile / -M      Receptor Grid Map 파일 경로 (.fld 파일)      필수              --flexres / -F      Flexible residue 파일 경로 (.pdbqt)      없음              --filelist / -B      Batch 모드로 처리할 파일 리스트 지정      없음      출력 관련            옵션      설명      기본값                  --resnam / -N      출력 로그 파일 이름      Ligand 이름              --contact_analysis      도킹 후 거리를 기반으로 한 접촉 분석 수행      0 (비활성)              --dlgoutput      .dlg 형식 결과 파일 생성 여부      1 (활성)              --xmloutput      .xml 형식 결과 파일 생성 여부      1 (활성)              --output-cluster-poses      클러스터링 결과에서 출력할 자세 수      0 (모두)      탐색 알고리즘 설정            옵션      설명      기본값                  --nrun / -n      LGA (Local Search Genetic Algorithm) 실행 횟수      20              --nev / -e      LGA 실행당 최대 평가 횟수      2500000              --ngen / -g      세대 수 (Generations)      42000              --psize / -p      LGA 인구 크기      150              --lsrat      Local Search 비율 (%)      100              --crat      Crossover 비율 (%)      80              --mrat      Mutation 비율 (%)      2              --dmov      최대 LGA 이동 변위 (Å)      6.0              --dang      최대 LGA 회전 변위 (°)      90.0      스코어링 및 에너지 설정            옵션      설명      기본값                  --smooth      van der Waals 상호작용의 스무딩 파라미터 (Å)      0.5              --elecmindist      최소 전기적 상호작용 거리 (Å)      0.01      기타 설정            옵션      설명      기본값                  --devnum / -D      CUDA/OpenCL 디바이스 번호      1              --seed / -s      랜덤 시드 (세 개의 정수 지정 가능)      시간, PID              --autostop      수렴 기준에 따라 자동 정지 여부      1 (활성)              --asfreq      AutoStop 테스트 빈도 (세대 수)      5      5. 옵션 활용 예시--nrun 조정  실행 횟수를 늘리면 더 많은 자세를 탐색하여 결합 안정성을 확인할 수 있습니다.    ./bin/autodock_gpu_64wi \\--ffile [Receptor Grid Map 경로] \\--lfile [Ligand 파일 경로] \\--nrun 50 \\--resnam [결과 파일 경로]      --smooth 사용  van der Waals 스무딩 파라미터를 변경하여 더 부드러운 상호작용을 모델링할 수 있습니다.    ./bin/autodock_gpu_64wi \\--ffile [Receptor Grid Map 경로] \\--lfile [Ligand 파일 경로] \\--smooth 1.0 \\--resnam [결과 파일 경로]      Flexible Residues 추가  리간드와 결합부위를 유연하게 처리할 때 사용합니다.    ./bin/autodock_gpu_64wi \\--ffile [Receptor Grid Map 경로] \\--lfile [Ligand 파일 경로] \\--flexres [Flexible Residue 파일 경로] \\--resnam [결과 파일 경로]      6. Links  Github: https://github.com/ccsb-scripps/AutoDock-GPU  참고 문헌: Accelerating AutoDock4 with GPUs and Gradient-Based Local SearchJ. Chem. Theory Comput. 2021. DOI: https://pubs.acs.org/doi/10.1021/acs.jctc.0c01006"
  },
  
  {
    "title": "Competent cell, CaCl2 method",
    "url": "/posts/cacal2/",
    "categories": "Lab protocol",
    "tags": "Competent cell, Protocol",
    "date": "2024-11-07 00:00:00 +0800",
    





    
    "snippet": "Competent Cells Preparation and Transformation ProtocolReference  2017, Chemotransformation of bacterial cells without heat-shock  2017, Making Calcium Competent Cells protocol - iGEMMaterials  5ml...",
    "content": "Competent Cells Preparation and Transformation ProtocolReference  2017, Chemotransformation of bacterial cells without heat-shock  2017, Making Calcium Competent Cells protocol - iGEMMaterials  5ml LB broth (Seed culture)  100ml LB broth (Main culture)  25ml 0.1M CaCl2 (Wash buffer)  5ml 0.1M CaCl2 with 15% glycerol (Suspension buffer)*All supplies were subjected to high temperature sterilization before use.Procedure  Streaking: Streak E. coli cells onto fresh LB solid media, followed by incubation at 37 °C for 14 hours.  Inoculation: Inoculate E. coli colonies into fresh LB liquid media, followed by shaking incubation at 37 °C for 16 hours.  Transfer Culture: Transfer 1 mL of the overnight cell culture into 100 mL of fresh LB, shaking and incubating at 37 °C until the OD600 reaches 0.4.          (Seed an overnight culture at a 1:100 dilution in LB. Warning: Do not let the OD600 exceed 0.5 or poor competent cells will result.)        Chilling: Incubate the cells on ice for 1 hour.  Centrifugation: Centrifuge at 4 °C (4000 r/min, 10 min).  Re-suspension: Gently re-suspend the cell pellet using 25 mL of precooled 0.1M CaCl2.          (Resuspend the cells in 1/4 volume of ice-cold 0.1M CaCl2)        Incubation: Incubate the resulting cell suspension on ice for 20 minutes.          (Optimal transformation frequency requires at least 1 hour on ice; ideal incubation is 12-16 hours at 4 °C)        Centrifugation: Centrifuge again at 4 °C (4000 r/min, 10 min).  Final Re-suspension: Gently re-suspend the cell pellet using 1 mL of precooled 0.1M CaCl2 with 10% w/v glycerol.          (Final concentration: 15 OD600 units/ml; for example, 100ml with OD 0.4 results in xml: OD 15)        Final Incubation: Incubate the resulting cell suspension on ice for 30 minutes.  Aliquoting: Divide the mixture into small aliquots and transfer to a -80 °C freezer.Transforming the Cells  Remove an aliquot of competent cells and let them thaw completely on ice.  Add up to 10 µl of DNA to 100 µl of competent cells.  Incubate on ice for at least 1 hour with periodic vortexing (every 20 minutes) to ensure even distribution and prevent settling.  Heat Shock: Heat shock cells at 42 °C for 90 seconds.          (The transformation efficiency of the non-heat-shock method may be slightly better than that of the classic heat-shock approach if the DNA-cell incubation time approaches 0.5-1 h.)        Add 100 µl of LB and plate on the appropriate selective media."
  },
  
  {
    "title": "RFAA (RoseTTAFold-All-Atom)",
    "url": "/posts/RFAA(RoseTTAFold-All-Atom)/",
    "categories": "Bioinformatics, Model",
    "tags": "RFAA, RoseTTAFold, Bioinformatics, Protein Structure",
    "date": "2024-11-07 00:00:00 +0800",
    





    
    "snippet": "RFAA (RoseTTAFold-All-Atom)1. Docker 프로그램 실행  바탕화면에 있는 Docker 아이콘을 더블 클릭하여 Docker 프로그램을 실행합니다.2. 터미널 열기  바탕화면의 MARS 폴더로 이동한 후, RFAA 폴더를 찾습니다.  RFAA 폴더에서 마우스 오른쪽 버튼을 클릭하여 ‘터미널에서 열기’를 선택합니다.3. Docker...",
    "content": "RFAA (RoseTTAFold-All-Atom)1. Docker 프로그램 실행  바탕화면에 있는 Docker 아이콘을 더블 클릭하여 Docker 프로그램을 실행합니다.2. 터미널 열기  바탕화면의 MARS 폴더로 이동한 후, RFAA 폴더를 찾습니다.  RFAA 폴더에서 마우스 오른쪽 버튼을 클릭하여 ‘터미널에서 열기’를 선택합니다.3. Docker 실행 및 GPU 테스트      아래 명령어를 차례로 입력하여 Docker와 GPU 인식을 확인합니다:    docker run hello-world  # Docker 실행 테스트docker run --gpus all nvidia/cuda:11.8.0-runtime-ubuntu22.04 nvidia-smi  # GPU 인식 테스트      4. RFAA Docker 이미지 빌드 및 실행      아래 명령어로 Docker 이미지를 빌드하고, GPU 지원을 활성화한 상태로 컨테이너를 실행합니다:    docker build -t rfaa .  # Docker 이미지 빌드 (약 11분 소요)docker run --gpus all -it rfaa /bin/bash  # GPU 지원과 함께 컨테이너 실행      5. 환경 활성화 및 TensorFlow GPU 인식 테스트      컨테이너 내에서 아래 명령어를 실행하여 RFAA 환경을 활성화하고, TensorFlow가 GPU를 인식하는지 확인합니다:    source activate RFAA  # 환경 활성화python -c \"import tensorflow as tf; print('Num GPUs Available:', len(tf.config.list_physical_devices('GPU')))\"        Num GPUs Available: 1라고 표시되면 다음 단계로 진행합니다.      Num GPUs Available: 0이라면 아래 명령어를 추가로 입력하여 TensorFlow를 업그레이드하고 환경 변수를 설정합니다:    mamba install tensorflow-gpu=2.11  # TensorFlow 업그레이드docker run --gpus all -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=compute,utility -it rfaa /bin/bash  # 환경변수 설정        Num GPUs Available: 1이 표시되면 성공적으로 GPU가 인식된 것입니다!6. RFAA 모델 예측 테스트      RFAA 모델 예측을 위한 파일을 다운로드하고, 예시로 단백질 예측을 수행해봅니다:    git clone https://github.com/baker-laboratory/RoseTTAFold-All-Atom.gitcd RoseTTAFold-All-Atompython -m rf2aa.run_inference --config-name protein  # 단백질 예측 테스트      7. 내 서열로 테스트하기  위 단계를 완료한 후, 내 서열로 예측을 진행할 수 있습니다."
  },
  
  {
    "title": "AF2 (AlphaFold2)",
    "url": "/posts/AF2(AlphaFold2)/",
    "categories": "Bioinformatics, Model",
    "tags": "AlphaFold2, Protein Folding, Bioinformatics",
    "date": "2024-11-07 00:00:00 +0800",
    





    
    "snippet": "AlphaFold2 (AF2) 사용법1. AlphaFold2 소개AlphaFold2는 단백질 구조 예측을 위한 강력한 AI 모델로, 단백질 서열을 기반으로 3차원 구조를 예측할 수 있습니다.2. 설치 및 환경 설정AlphaFold2를 사용하려면 몇 가지 환경 설정이 필요합니다. 다음 명령어로 환경을 설정할 수 있습니다:```bash예시 명령어git c...",
    "content": "AlphaFold2 (AF2) 사용법1. AlphaFold2 소개AlphaFold2는 단백질 구조 예측을 위한 강력한 AI 모델로, 단백질 서열을 기반으로 3차원 구조를 예측할 수 있습니다.2. 설치 및 환경 설정AlphaFold2를 사용하려면 몇 가지 환경 설정이 필요합니다. 다음 명령어로 환경을 설정할 수 있습니다:```bash예시 명령어git clone https://github.com/deepmind/alphafold.gitcd alphafold"
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Test, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Test, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    
    "snippet": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnec...",
    "content": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnecessary files, and is perfect for users who want to focus on writing with minimal configuration.  Sign in to GitHub and navigate to the starter.  Click the Use this template button and then select Create a new repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Option 2. Forking the ThemeThis approach is convenient for modifying features or UI design, but presents challenges during upgrades. So don’t try this unless you are familiar with Jekyll and plan to heavily modify this theme.  Sign in to GitHub.  Fork the theme repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Setting up the EnvironmentOnce your repository is created, it’s time to set up your development environment. There are two primary methods:Using Dev Containers (Recommended for Windows)Dev Containers offer an isolated environment using Docker, which prevents conflicts with your system and ensures all dependencies are managed within the container.Steps:  Install Docker:          On Windows/macOS, install Docker Desktop.      On Linux, install Docker Engine.        Install VS Code and the Dev Containers extension.  Clone your repository:          For Docker Desktop: Start VS Code and clone your repo in a container volume.      For Docker Engine: Clone your repo locally, then open it in a container via VS Code.        Wait for the Dev Containers setup to complete.Setting up Natively (Recommended for Unix-like OS)For Unix-like systems, you can set up the environment natively for optimal performance, though you can also use Dev Containers as an alternative.Steps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone your repository to your local machine.  If you forked the theme, install Node.js and run bash tools/init.sh in the root directory to initialize the repository.  Run command bundle in the root of your repository to install the dependencies.UsageStart the Jekyll ServerTo run the site locally, use the following command:$ bundle exec jekyll s  If you are using Dev Containers, you must run that command in the VS Code Terminal.After a few seconds, the local server will be available at http://127.0.0.1:4000.ConfigurationUpdate the variables in _config.yml as needed. Some typical options include:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can enable or disable specific contacts in the _data/contact.yml file.Customizing the StylesheetTo customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss file to the same path in your Jekyll site, and add your custom styles at the end of the file.Starting with version 6.2.0, if you want to overwrite the SASS variables defined in _sass/addon/variables.scss, copy the main SASS file _sass/main.scss to the _sass directory in your site’s source, then create a new file _sass/variables-hook.scss and assign your new values there.Customizing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined in _data/origin/cors.yml. You can replace some of them based on the network conditions in the region where your website is published.If you prefer to self-host the static assets, refer to the chirpy-static-assets repository.DeploymentBefore deploying, check the _config.yml file and ensure the url is configured correctly. If you prefer a project site and don’t use a custom domain, or if you want to visit your website with a base URL on a web server other than GitHub Pages, remember to set the baseurl to your project name, starting with a slash, e.g., /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy Using Github ActionsPrepare the following:  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, update the platform list of the lock file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service:      Go to your repository on GitHub. Select the Settings tab, then click Pages in the left navigation bar. In the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  You can now visit the URL provided by GitHub to access your site.Manual Build and DeploymentFor self-hosted servers, you will need to build the site on your local machine and then upload the site files to the server.Navigate to the root of the source project, and build your site with the following command:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in the _site folder of the project’s root directory. Upload these files to your target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Test, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Test, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

